/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.hehehe.servicebuilder.model.impl;

import com.hehehe.servicebuilder.model.Book;
import com.hehehe.servicebuilder.model.BookModel;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Book service. Represents a row in the &quot;BookServiceBuilder_Book&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>BookModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BookImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BookImpl
 * @generated
 */
@JSON(strict = true)
public class BookModelImpl extends BaseModelImpl<Book> implements BookModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a book model instance should use the <code>Book</code> interface instead.
	 */
	public static final String TABLE_NAME = "BookServiceBuilder_Book";

	public static final Object[][] TABLE_COLUMNS = {
		{"bookId", Types.VARCHAR}, {"title", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"description", Types.VARCHAR}, {"thumbnail", Types.VARCHAR},
		{"published_year", Types.INTEGER}, {"num_pages", Types.INTEGER},
		{"price", Types.INTEGER}, {"stock", Types.INTEGER},
		{"subtitleId", Types.VARCHAR}, {"categoryId", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("bookId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("thumbnail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("published_year", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("num_pages", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("price", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("stock", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("subtitleId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("categoryId", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table BookServiceBuilder_Book (bookId VARCHAR(75) not null primary key,title VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,description VARCHAR(75) null,thumbnail VARCHAR(75) null,published_year INTEGER,num_pages INTEGER,price INTEGER,stock INTEGER,subtitleId VARCHAR(75) null,categoryId VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table BookServiceBuilder_Book";

	public static final String ORDER_BY_JPQL = " ORDER BY book.bookId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY BookServiceBuilder_Book.bookId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CATEGORYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SUBTITLEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long BOOKID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public BookModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _bookId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setBookId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _bookId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Book.class;
	}

	@Override
	public String getModelClassName() {
		return Book.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Book, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Book, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Book, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Book)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Book, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Book, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Book)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Book, Object>> getAttributeGetterFunctions() {
		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Book, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Book, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Book, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Book, Object>>();

			attributeGetterFunctions.put("bookId", Book::getBookId);
			attributeGetterFunctions.put("title", Book::getTitle);
			attributeGetterFunctions.put("createDate", Book::getCreateDate);
			attributeGetterFunctions.put("modifiedDate", Book::getModifiedDate);
			attributeGetterFunctions.put("description", Book::getDescription);
			attributeGetterFunctions.put("thumbnail", Book::getThumbnail);
			attributeGetterFunctions.put(
				"published_year", Book::getPublished_year);
			attributeGetterFunctions.put("num_pages", Book::getNum_pages);
			attributeGetterFunctions.put("price", Book::getPrice);
			attributeGetterFunctions.put("stock", Book::getStock);
			attributeGetterFunctions.put("subtitleId", Book::getSubtitleId);
			attributeGetterFunctions.put("categoryId", Book::getCategoryId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Book, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Book, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Book, ?>>();

			attributeSetterBiConsumers.put(
				"bookId", (BiConsumer<Book, String>)Book::setBookId);
			attributeSetterBiConsumers.put(
				"title", (BiConsumer<Book, String>)Book::setTitle);
			attributeSetterBiConsumers.put(
				"createDate", (BiConsumer<Book, Date>)Book::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate", (BiConsumer<Book, Date>)Book::setModifiedDate);
			attributeSetterBiConsumers.put(
				"description", (BiConsumer<Book, String>)Book::setDescription);
			attributeSetterBiConsumers.put(
				"thumbnail", (BiConsumer<Book, String>)Book::setThumbnail);
			attributeSetterBiConsumers.put(
				"published_year",
				(BiConsumer<Book, Integer>)Book::setPublished_year);
			attributeSetterBiConsumers.put(
				"num_pages", (BiConsumer<Book, Integer>)Book::setNum_pages);
			attributeSetterBiConsumers.put(
				"price", (BiConsumer<Book, Integer>)Book::setPrice);
			attributeSetterBiConsumers.put(
				"stock", (BiConsumer<Book, Integer>)Book::setStock);
			attributeSetterBiConsumers.put(
				"subtitleId", (BiConsumer<Book, String>)Book::setSubtitleId);
			attributeSetterBiConsumers.put(
				"categoryId", (BiConsumer<Book, String>)Book::setCategoryId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getBookId() {
		if (_bookId == null) {
			return "";
		}
		else {
			return _bookId;
		}
	}

	@Override
	public void setBookId(String bookId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bookId = bookId;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public String getThumbnail() {
		if (_thumbnail == null) {
			return "";
		}
		else {
			return _thumbnail;
		}
	}

	@Override
	public void setThumbnail(String thumbnail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_thumbnail = thumbnail;
	}

	@JSON
	@Override
	public Integer getPublished_year() {
		return _published_year;
	}

	@Override
	public void setPublished_year(Integer published_year) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_published_year = published_year;
	}

	@JSON
	@Override
	public Integer getNum_pages() {
		return _num_pages;
	}

	@Override
	public void setNum_pages(Integer num_pages) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_num_pages = num_pages;
	}

	@JSON
	@Override
	public Integer getPrice() {
		return _price;
	}

	@Override
	public void setPrice(Integer price) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_price = price;
	}

	@JSON
	@Override
	public Integer getStock() {
		return _stock;
	}

	@Override
	public void setStock(Integer stock) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stock = stock;
	}

	@JSON
	@Override
	public String getSubtitleId() {
		if (_subtitleId == null) {
			return "";
		}
		else {
			return _subtitleId;
		}
	}

	@Override
	public void setSubtitleId(String subtitleId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_subtitleId = subtitleId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalSubtitleId() {
		return getColumnOriginalValue("subtitleId");
	}

	@JSON
	@Override
	public String getCategoryId() {
		if (_categoryId == null) {
			return "";
		}
		else {
			return _categoryId;
		}
	}

	@Override
	public void setCategoryId(String categoryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_categoryId = categoryId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCategoryId() {
		return getColumnOriginalValue("categoryId");
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public Book toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Book>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BookImpl bookImpl = new BookImpl();

		bookImpl.setBookId(getBookId());
		bookImpl.setTitle(getTitle());
		bookImpl.setCreateDate(getCreateDate());
		bookImpl.setModifiedDate(getModifiedDate());
		bookImpl.setDescription(getDescription());
		bookImpl.setThumbnail(getThumbnail());
		bookImpl.setPublished_year(getPublished_year());
		bookImpl.setNum_pages(getNum_pages());
		bookImpl.setPrice(getPrice());
		bookImpl.setStock(getStock());
		bookImpl.setSubtitleId(getSubtitleId());
		bookImpl.setCategoryId(getCategoryId());

		bookImpl.resetOriginalValues();

		return bookImpl;
	}

	@Override
	public Book cloneWithOriginalValues() {
		BookImpl bookImpl = new BookImpl();

		bookImpl.setBookId(this.<String>getColumnOriginalValue("bookId"));
		bookImpl.setTitle(this.<String>getColumnOriginalValue("title"));
		bookImpl.setCreateDate(this.<Date>getColumnOriginalValue("createDate"));
		bookImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		bookImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		bookImpl.setThumbnail(this.<String>getColumnOriginalValue("thumbnail"));
		bookImpl.setPublished_year(
			this.<Integer>getColumnOriginalValue("published_year"));
		bookImpl.setNum_pages(
			this.<Integer>getColumnOriginalValue("num_pages"));
		bookImpl.setPrice(this.<Integer>getColumnOriginalValue("price"));
		bookImpl.setStock(this.<Integer>getColumnOriginalValue("stock"));
		bookImpl.setSubtitleId(
			this.<String>getColumnOriginalValue("subtitleId"));
		bookImpl.setCategoryId(
			this.<String>getColumnOriginalValue("categoryId"));

		return bookImpl;
	}

	@Override
	public int compareTo(Book book) {
		String primaryKey = book.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Book)) {
			return false;
		}

		Book book = (Book)object;

		String primaryKey = book.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Book> toCacheModel() {
		BookCacheModel bookCacheModel = new BookCacheModel();

		bookCacheModel.bookId = getBookId();

		String bookId = bookCacheModel.bookId;

		if ((bookId != null) && (bookId.length() == 0)) {
			bookCacheModel.bookId = null;
		}

		bookCacheModel.title = getTitle();

		String title = bookCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			bookCacheModel.title = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			bookCacheModel.createDate = createDate.getTime();
		}
		else {
			bookCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			bookCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			bookCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		bookCacheModel.description = getDescription();

		String description = bookCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			bookCacheModel.description = null;
		}

		bookCacheModel.thumbnail = getThumbnail();

		String thumbnail = bookCacheModel.thumbnail;

		if ((thumbnail != null) && (thumbnail.length() == 0)) {
			bookCacheModel.thumbnail = null;
		}

		Integer published_year = getPublished_year();

		if (published_year != null) {
			bookCacheModel.published_year = published_year;
		}

		Integer num_pages = getNum_pages();

		if (num_pages != null) {
			bookCacheModel.num_pages = num_pages;
		}

		Integer price = getPrice();

		if (price != null) {
			bookCacheModel.price = price;
		}

		Integer stock = getStock();

		if (stock != null) {
			bookCacheModel.stock = stock;
		}

		bookCacheModel.subtitleId = getSubtitleId();

		String subtitleId = bookCacheModel.subtitleId;

		if ((subtitleId != null) && (subtitleId.length() == 0)) {
			bookCacheModel.subtitleId = null;
		}

		bookCacheModel.categoryId = getCategoryId();

		String categoryId = bookCacheModel.categoryId;

		if ((categoryId != null) && (categoryId.length() == 0)) {
			bookCacheModel.categoryId = null;
		}

		return bookCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Book, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Book, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Book, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Book)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Book>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Book.class, ModelWrapper.class);

	}

	private String _bookId;
	private String _title;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _description;
	private String _thumbnail;
	private Integer _published_year;
	private Integer _num_pages;
	private Integer _price;
	private Integer _stock;
	private String _subtitleId;
	private String _categoryId;

	public <T> T getColumnValue(String columnName) {
		Function<Book, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Book)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("bookId", _bookId);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("thumbnail", _thumbnail);
		_columnOriginalValues.put("published_year", _published_year);
		_columnOriginalValues.put("num_pages", _num_pages);
		_columnOriginalValues.put("price", _price);
		_columnOriginalValues.put("stock", _stock);
		_columnOriginalValues.put("subtitleId", _subtitleId);
		_columnOriginalValues.put("categoryId", _categoryId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("bookId", 1L);

		columnBitmasks.put("title", 2L);

		columnBitmasks.put("createDate", 4L);

		columnBitmasks.put("modifiedDate", 8L);

		columnBitmasks.put("description", 16L);

		columnBitmasks.put("thumbnail", 32L);

		columnBitmasks.put("published_year", 64L);

		columnBitmasks.put("num_pages", 128L);

		columnBitmasks.put("price", 256L);

		columnBitmasks.put("stock", 512L);

		columnBitmasks.put("subtitleId", 1024L);

		columnBitmasks.put("categoryId", 2048L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Book _escapedModel;

}