/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.hehehe.servicebuilder.model.impl;

import com.hehehe.servicebuilder.model.BookAuthor;
import com.hehehe.servicebuilder.model.BookAuthorModel;
import com.hehehe.servicebuilder.service.persistence.BookAuthorPK;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the BookAuthor service. Represents a row in the &quot;BookServiceBuilder_BookAuthor&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>BookAuthorModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BookAuthorImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BookAuthorImpl
 * @generated
 */
public class BookAuthorModelImpl
	extends BaseModelImpl<BookAuthor> implements BookAuthorModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a book author model instance should use the <code>BookAuthor</code> interface instead.
	 */
	public static final String TABLE_NAME = "BookServiceBuilder_BookAuthor";

	public static final Object[][] TABLE_COLUMNS = {
		{"bookId", Types.VARCHAR}, {"authorId", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("bookId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("authorId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table BookServiceBuilder_BookAuthor (bookId VARCHAR(75) not null,authorId VARCHAR(75) not null,createDate DATE null,modifiedDate DATE null,primary key (bookId, authorId))";

	public static final String TABLE_SQL_DROP =
		"drop table BookServiceBuilder_BookAuthor";

	public static final String ORDER_BY_JPQL =
		" ORDER BY bookAuthor.id.bookId ASC, bookAuthor.id.authorId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY BookServiceBuilder_BookAuthor.bookId ASC, BookServiceBuilder_BookAuthor.authorId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long AUTHORID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long BOOKID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public BookAuthorModelImpl() {
	}

	@Override
	public BookAuthorPK getPrimaryKey() {
		return new BookAuthorPK(_bookId, _authorId);
	}

	@Override
	public void setPrimaryKey(BookAuthorPK primaryKey) {
		setBookId(primaryKey.bookId);
		setAuthorId(primaryKey.authorId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new BookAuthorPK(_bookId, _authorId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((BookAuthorPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return BookAuthor.class;
	}

	@Override
	public String getModelClassName() {
		return BookAuthor.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<BookAuthor, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<BookAuthor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BookAuthor, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((BookAuthor)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<BookAuthor, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<BookAuthor, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(BookAuthor)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<BookAuthor, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<BookAuthor, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<BookAuthor, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<BookAuthor, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<BookAuthor, Object>>();

			attributeGetterFunctions.put("bookId", BookAuthor::getBookId);
			attributeGetterFunctions.put("authorId", BookAuthor::getAuthorId);
			attributeGetterFunctions.put(
				"createDate", BookAuthor::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", BookAuthor::getModifiedDate);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<BookAuthor, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<BookAuthor, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<BookAuthor, ?>>();

			attributeSetterBiConsumers.put(
				"bookId",
				(BiConsumer<BookAuthor, String>)BookAuthor::setBookId);
			attributeSetterBiConsumers.put(
				"authorId",
				(BiConsumer<BookAuthor, String>)BookAuthor::setAuthorId);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<BookAuthor, Date>)BookAuthor::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<BookAuthor, Date>)BookAuthor::setModifiedDate);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@Override
	public String getBookId() {
		if (_bookId == null) {
			return "";
		}
		else {
			return _bookId;
		}
	}

	@Override
	public void setBookId(String bookId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bookId = bookId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalBookId() {
		return getColumnOriginalValue("bookId");
	}

	@Override
	public String getAuthorId() {
		if (_authorId == null) {
			return "";
		}
		else {
			return _authorId;
		}
	}

	@Override
	public void setAuthorId(String authorId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_authorId = authorId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalAuthorId() {
		return getColumnOriginalValue("authorId");
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public BookAuthor toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, BookAuthor>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BookAuthorImpl bookAuthorImpl = new BookAuthorImpl();

		bookAuthorImpl.setBookId(getBookId());
		bookAuthorImpl.setAuthorId(getAuthorId());
		bookAuthorImpl.setCreateDate(getCreateDate());
		bookAuthorImpl.setModifiedDate(getModifiedDate());

		bookAuthorImpl.resetOriginalValues();

		return bookAuthorImpl;
	}

	@Override
	public BookAuthor cloneWithOriginalValues() {
		BookAuthorImpl bookAuthorImpl = new BookAuthorImpl();

		bookAuthorImpl.setBookId(this.<String>getColumnOriginalValue("bookId"));
		bookAuthorImpl.setAuthorId(
			this.<String>getColumnOriginalValue("authorId"));
		bookAuthorImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		bookAuthorImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return bookAuthorImpl;
	}

	@Override
	public int compareTo(BookAuthor bookAuthor) {
		BookAuthorPK primaryKey = bookAuthor.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof BookAuthor)) {
			return false;
		}

		BookAuthor bookAuthor = (BookAuthor)object;

		BookAuthorPK primaryKey = bookAuthor.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<BookAuthor> toCacheModel() {
		BookAuthorCacheModel bookAuthorCacheModel = new BookAuthorCacheModel();

		bookAuthorCacheModel.bookAuthorPK = getPrimaryKey();

		bookAuthorCacheModel.bookId = getBookId();

		String bookId = bookAuthorCacheModel.bookId;

		if ((bookId != null) && (bookId.length() == 0)) {
			bookAuthorCacheModel.bookId = null;
		}

		bookAuthorCacheModel.authorId = getAuthorId();

		String authorId = bookAuthorCacheModel.authorId;

		if ((authorId != null) && (authorId.length() == 0)) {
			bookAuthorCacheModel.authorId = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			bookAuthorCacheModel.createDate = createDate.getTime();
		}
		else {
			bookAuthorCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			bookAuthorCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			bookAuthorCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return bookAuthorCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<BookAuthor, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<BookAuthor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BookAuthor, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((BookAuthor)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, BookAuthor>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					BookAuthor.class, ModelWrapper.class);

	}

	private String _bookId;
	private String _authorId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		Function<BookAuthor, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((BookAuthor)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("bookId", _bookId);
		_columnOriginalValues.put("authorId", _authorId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("bookId", 1L);

		columnBitmasks.put("authorId", 2L);

		columnBitmasks.put("createDate", 4L);

		columnBitmasks.put("modifiedDate", 8L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private BookAuthor _escapedModel;

}